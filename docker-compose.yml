services:
  app_blue:
    build: ./app
    restart: always
    profiles: ["blue"]
    environment:
      - APP_ENV=blue
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (r) => { let data = ''; r.on('data', (chunk) => data += chunk); r.on('end', () => { try { const json = JSON.parse(data); process.exit(json.status === 'healthy' ? 0 : 1); } catch(e) { process.exit(1); } }); }).on('error', () => process.exit(1));"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 10s

  app_green:
    build: ./app
    restart: always
    profiles: ["green"]
    environment:
      - APP_ENV=green
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (r) => { let data = ''; r.on('data', (chunk) => data += chunk); r.on('end', () => { try { const json = JSON.parse(data); process.exit(json.status === 'healthy' ? 0 : 1); } catch(e) { process.exit(1); } }); }).on('error', () => process.exit(1));"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 10s

  # certbot:
  #   image: certbot/certbot
  #   volumes:
  #     - ./certbot/conf:/etc/letsencrypt
  #     - ./certbot/www:/var/www/certbot
  #   entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  nginx:
    image: nginx:alpine
    profiles:
      - core
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/includes:/etc/nginx/includes:ro
      - ./nginx/locations:/etc/nginx/locations:ro
      - ./nginx/upstreams:/etc/nginx/upstreams:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    depends_on:
      app_blue:
        condition: service_started
        required: false
      app_green:
        condition: service_started
        required: false
    restart: always
